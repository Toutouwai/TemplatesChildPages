<?php
/**
 *
 * Templates: Child Pages
 *
 * @author Robin Sallis
 *
 * @credits bitpoet: some code adapted from his 'Template Access by Parents' module
 * @credits hani: this module requires his 'Template ASM Select' module
 *
 * ProcessWire 2.x
 * Copyright (C) 2014 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://processwire.com
 *
 */

class TemplatesChildPages extends WireData implements Module {

	/**
	 * Module information
	 *
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Templates: Child Pages',
			'version' => '4',
			'author' => 'Robin Sallis',
			'summary' => 'For any page, allows the restricting of templates that may be used for child pages.',
			'singular' => true,
			'autoload' => "template=admin",
			'icon' => 'cubes',
			'requires' => 'FieldtypeTemplates', // 'Template ASM Select' module
		);
	}

	/**
	 * On install, add the field used for storing allowed templates
	 *
	 * @access public
	 *
	 */
	public function ___install() {
		if(!$this->fields->get('templates_child_pages')) {
			$f = new Field();
			$f->type = $this->modules->get('FieldtypeTemplates');
			$f->name = 'templates_child_pages';
			$f->tags = 'TemplatesChildPages';
			$f->label = 'Template restrictions for children';
			$f->description = 'If empty no additional restrictions on templates are applied.';
			$f->addFlag(32); // Field is access controlled (superuser only)
			$f->addFlag(4); // Field is global
			$f->collapsed = Inputfield::collapsedHidden; // Field is hidden
			$f->save();
		}
	}

	/**
	 * Initialise
	 *
	 * @access public
	 *
	 */
	public function init() {
		$this->addHookAfter('ProcessPageEdit::buildFormChildren', $this, 'appendFieldToForm');
		$this->addHookAfter('Pages::saveReady', $this, 'saveTemplatesField');
		$this->addHookAfter('ProcessPageAdd::getAllowedTemplates', $this, 'filterAllowedTemplates');
	}


	/**
	 * Append allowed templates field to Children tab form
	 *
	 * @access public
	 *
	 */
	public function appendFieldToForm($event) {
		if(!$this->user->isSuperuser()) return;

		// Children tab is loaded via AJAX so make sure AsmSelect JS/CSS files are included in head
		$asm = $this->modules->InputfieldAsmSelect;
		$class = $asm->className();
		$info = $asm->getModuleInfo();
		$ver = $info['version'];
		$jsfile = $this->config->debug ? 'jquery.asmselect.js' : 'jquery.asmselect.min.js';
		$this->config->scripts->add($this->config->urls->$class . "asmselect/$jsfile?v=$ver");
		$this->config->styles->add($this->config->urls->$class . "$class.css?v=$ver");
		$this->config->styles->add($this->config->urls->$class . "asmselect/jquery.asmselect.css?v=$ver");

		// Append field
		$page = $event->object->getPage();
		if($page->template->hasField('templates_child_pages')) {
			$field = $this->fields->get('templates_child_pages');
			$if = $field->getInputfield($page);
			$form = $event->return;
			// Get value of 'templates_child_pages' field
			$allowed_templates = $page->templates_child_pages;

			// Create and append inputfield
			$f = $this->modules->get('InputfieldAsmSelect');
			$f->name = 'allowed_templates';
			$f->label = $if->label;
			$f->description = $if->description;
			if($field->templateTypes) {
				// Apply any limits on template types set in field options
				$ids = implode('|', $field->templateTypes);
				$templates = $this->templates->find("id=$ids");
			} else {
				$templates = $this->templates;
			}
			foreach($templates as $template) {
				$f->addOption($template->id, $template->label ? $template->label : $template->name);
			}
			$f->value = $allowed_templates;
			$f->collapsed = Inputfield::collapsedBlank; // Field is collapsed if empty
			$form->append($f);

			// Add JS options
			$this->config->js($f->id, array('sortable' => false));
		}
	}

	/**
	 * Save allowed templates
	 *
	 * @access public
	 *
	 */
	public function saveTemplatesField($event) {
		if(!$this->user->isSuperuser()) return;
		$page = $event->arguments('page');
		if($page->template->hasField('templates_child_pages')) {
			$allowed_templates = $this->input->post->allowed_templates;
			// Set value of 'templates_child_pages' field
			if(is_array($allowed_templates)) {
				$allowed_templates_int = array();
				foreach ($allowed_templates as $template_id) {
					$allowed_templates_int[] = (int)$template_id;
				}
				$page->templates_child_pages = $allowed_templates_int;
			} else {
				$page->templates_child_pages = '';
			}
		}
	}

	/**
	 * Filter allowed templates
	 *
	 * @access public
	 *
	 */
	public function filterAllowedTemplates($event) {
		// Get parent page
		$parent = $event->arguments(0);
		if(! $parent) {
			$parent = $this->pages->get((int)$this->input->get->parent_id);
		}
		if(! $parent) {
			$parent = $this->pages->get((int)$this->input->post->parent_id);
		}
		if($parent instanceof NullPage) return;
		// Filter templates
		$templates = $event->return;
		$allowed_templates = $parent->templates_child_pages;
		if($allowed_templates) {
			$out = array();
			foreach($templates as $template) {
				if(in_array($template->id, $allowed_templates)) {
					$out[$template->id] = $template;
				}
			}
			$event->return = $out;
		}
	}

	/**
	 * On uninstall, delete the field used for storing allowed templates
	 *
	 * @access public
	 *
	 */
	public function ___uninstall() {
		$f = $this->fields->get('templates_child_pages');
		if($f) {
			$f_groups = $f->getFieldgroups();
			foreach ($f_groups as $f_group) {
				$f->removeFlag(4); // Remove global flag
				$f_group->remove($f);
				$f_group->save();
			}
			$this->fields->delete($f);
		}
	}

}
