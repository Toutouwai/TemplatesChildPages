<?php
/**
 *
 * Templates: Child Pages
 *
 * @author Robin Sallis
 *
 * @credits BitPoet: some code adapted from his 'Template Access by Parents' module
 *
 * ProcessWire 2.x
 * Copyright (C) 2014 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://processwire.com
 *
 */

class TemplatesChildPages extends WireData implements Module {

	/**
	 * Module information
	 *
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Templates: Child Pages',
			'author' => 'Robin Sallis',
			'summary' => 'For any page, allows the restricting of templates that may be used for child pages.',
			'singular' => true,
			'autoload' => "template=admin",
			'icon' => 'cubes'
		);
	}


	protected $table = "templates_child_pages";

	/**
	 * Install
	 *
	 * @access public
	 *
	 */
	public function ___install() {
		$this->createTable();
	}

	public function ___upgrade($fromVersion, $toVersion) {
		// Upgrade from < v0.0.5
		if($fromVersion < 5) {
			// Create table
			$this->createTable();
			
			// Migrate old data
			$f = $this->fields->get('templates_child_pages');
			if($f && $f->type->name == 'FieldtypeTemplates') {
				// Find pages with template restrictions
				$restricted_pages = $this->pages->find("templates_child_pages.count>0");
				$migration_results = array();
				foreach($restricted_pages as $restricted_page) {
					$field_allowed_templates = array_map( function($object) { return $object->id; }, $restricted_page->templates_child_pages );
					$this->saveAllowedTemplates($restricted_page, $field_allowed_templates);
					$db_allowed_templates = $this->getAllowedTemplates($restricted_page);
					if($field_allowed_templates === $db_allowed_templates) {
						$migration_results[$restricted_page->id] = true;
					} else {
						$migration_results[$restricted_page->id] = false;
					}
				}
				if(in_array(false, $migration_results)) {
					$this->warning('Sorry, there was a problem migrating the existing data for this module.');
				} else {
					// Data migration was successful, delete obsolete field
					$f_groups = $f->getFieldgroups();
					foreach ($f_groups as $f_group) {
						$f->removeFlag(4); // Remove global flag
						$f_group->remove($f);
						$f_group->save();
					}
					$this->fields->delete($f);
					$this->message('Migration of existing data was successful.');
				}
			}
		}
	}

	/**
	 * Initialise
	 *
	 * @access public
	 *
	 */
	public function init() {
		$this->addHookAfter('ProcessPageEdit::buildFormChildren', $this, 'appendFieldToForm');
		$this->addHookAfter('ProcessPageAdd::getAllowedTemplates', $this, 'filterTemplates');
		$this->addHookAfter('Pages::saveReady', $this, 'getPostData');
		$this->addHookAfter('Pages::delete', $this, 'pageDeleted');
	}

	/**
	 * Get allowed templates
	 *
	 * @access public
	 *
	 */
	public function createTable() {
		$engine = $this->config->dbEngine;
		$charset = $this->config->dbCharset;
		$sql = <<< _END
		CREATE TABLE {$this->table} (
			page_id int UNSIGNED NOT NULL,
			data MEDIUMTEXT,
			PRIMARY KEY (page_id)
		) ENGINE = $engine DEFAULT CHARSET = $charset;
_END;
		$query = $this->database->prepare($sql);
		$result = $query->execute();
		if(!$result) $this->error("Error creating table '{$this->table}'");
	}

	/**
	 * Get allowed templates
	 *
	 * @access public
	 *
	 */
	public function getAllowedTemplates($page) {
		$query = $this->database->prepare("SELECT data FROM {$this->table} WHERE page_id = :id");
		$query->bindValue(":id", $page->id, PDO::PARAM_INT);
		$query->execute();
		$result = $query->fetch(PDO::FETCH_ASSOC);
		if($result && strlen($result["data"]) > 0) {
			$data = wireDecodeJSON($result["data"]);
			if(is_array($data) && count($data) > 0) {
				return $data;
			}
		}
		return array();
	}

	/**
	 * Save allowed templates
	 *
	 * @access public
	 *
	 */
	public function saveAllowedTemplates($page, $allowed_templates) {
		// Process $allowed_templates array
		if(is_array($allowed_templates)) {
			$allowed_templates = array_map('intval', $allowed_templates);
			$allowed_templates = wireEncodeJSON($allowed_templates);
		} else {
			$allowed_templates = '';
		}

		// Save to database
		$sql = "REPLACE INTO {$this->table} (page_id, data) VALUES (:id, :data)";
		$query = $this->database->prepare($sql);
		$query->bindValue(":id", $page->id, PDO::PARAM_INT);
		$query->bindValue(":data", $allowed_templates, PDO::PARAM_STR);
		$query->execute();
	}

	/**
	 * Append allowed templates field to Children tab form
	 *
	 * @access public
	 *
	 */
	public function appendFieldToForm($event) {
		if(!$this->user->isSuperuser()) return;
		$form = $event->return;
		$page = $event->object->getPage();

		// Children tab is loaded via AJAX so make sure AsmSelect JS/CSS files are included in head
		$asm = $this->modules->InputfieldAsmSelect;
		$class = $asm->className();
		$info = $asm->getModuleInfo();
		$ver = $info['version'];
		$jsfile = $this->config->debug ? 'jquery.asmselect.js' : 'jquery.asmselect.min.js';
		$this->config->scripts->add($this->config->urls->$class . "asmselect/$jsfile?v=$ver");
		$this->config->styles->add($this->config->urls->$class . "$class.css?v=$ver");
		$this->config->styles->add($this->config->urls->$class . "asmselect/jquery.asmselect.css?v=$ver");

		// Create and append inputfield
		$f = $this->modules->get('InputfieldAsmSelect');
		$f->name = 'allowed_templates';
		$f->label = 'Template restrictions for children';
		$f->description = 'If empty no additional restrictions on templates are applied.';
		foreach($this->templates as $template) {
			$f->addOption($template->id, $template->label ? $template->label : $template->name);
		}
		$f->value = $this->getAllowedTemplates($page);
		$f->collapsed = Inputfield::collapsedBlank; // Field is collapsed if empty
		$form->append($f);
	}

	/**
	 * Filter templates
	 *
	 * @access public
	 *
	 */
	public function filterTemplates($event) {
		// Get parent page
		$parent = $event->arguments('parent');
		if(!$parent) {
			$parent = $this->pages->get((int)$this->input->get->parent_id);
		}
		if(!$parent) {
			$parent = $this->pages->get((int)$this->input->post->parent_id);
		}
		if($parent instanceof NullPage) return;

		// Filter templates
		$templates = $event->return;
		$allowed_templates = $this->getAllowedTemplates($parent);
		if($allowed_templates) {
			$out = array();
			foreach($templates as $template) {
				if(in_array($template->id, $allowed_templates)) {
					$out[$template->id] = $template;
				}
			}
			$event->return = $out;
		}
	}

	/**
	 * Get allowed templates from post data
	 *
	 * @access public
	 *
	 */
	public function getPostData($event) {
		if(!$this->user->isSuperuser()) return;
		$page = $event->arguments('page');

		// Get array of allowed template IDs and save
		if($this->input->post->allowed_templates !== null) {
			$allowed_templates = $this->input->post->allowed_templates;
			$this->saveAllowedTemplates($page, $allowed_templates);
		}
	}

	/**
	 * Delete table row when page is deleted
	 *
	 * @access public
	 *
	 */
	public function pageDeleted($event) {
		$page = $event->arguments('page');
		$sql = "DELETE FROM {$this->table} WHERE page_id = :id";
		$query = $this->database->prepare($sql);
		$query->bindValue(":id", $page->id, PDO::PARAM_INT);
		$query->execute();
	}

	/**
	 * Uninstall
	 *
	 * @access public
	 *
	 */
	public function ___uninstall() {
		$database = $this->database;
		$sql = "DROP TABLE {$this->table}";
		$query = $database->prepare($sql);
		$result = $query->execute();
		if(!$result) $this->error("Error removing table '{$this->table}'");
	}

}
